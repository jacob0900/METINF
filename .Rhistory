)
# Histograma con curva de densidad
ggplot(Concrete, aes(x = Concrete[[9]])) +
geom_histogram(aes(y = after_stat(density)),
fill = "steelblue", color = "white", bins = 30, alpha = 0.7) +
geom_density(color = "darkred", linewidth = 1) +
labs(
title = "Distribución de la Resistencia a la Compresión del Concreto",
x = "Resistencia a la Compresión (MPa)",
y = "Densidad",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text = element_text(size = 11),
axis.title = element_text(face = "bold", size = 12)
)
ggplot(Concrete, aes(y = Cement)) +
geom_boxplot(fill = "coral", alpha = 0.7, outlier.color = "red", outlier.size = 2) +
labs(
title = "Distribución del Contenido de Cemento",
y = "Cemento (kg/m³)",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(face = "bold", size = 12)
)
Concrete %>%
summarise(
n = length(Cement),
media = mean(Cement),
ds = sd(Cement),
CV = (sd(Cement) / mean(Cement)) * 100,
mediana = median(Cement),
minimo = min(Cement),
maximo = max(Cement),
Q1 = quantile(Cement, 0.25),
Q3 = quantile(Cement, 0.75),
IQR = IQR(Cement)
)
ggplot(Concrete, aes(y = `Blast Furnace Slag`)) +
geom_boxplot(fill = "darkseagreen", alpha = 0.7, outlier.color = "red", outlier.size = 2) +
labs(
title = "Distribución del Contenido de Escoria de Alto Horno",
y = "Escoria de Alto Horno (kg/m³)",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(face = "bold", size = 12)
)
Concrete %>%
summarise(
n = length(`Blast Furnace Slag`),
media = mean(`Blast Furnace Slag`),
ds = sd(`Blast Furnace Slag`),
CV = (sd(`Blast Furnace Slag`) / mean(`Blast Furnace Slag`)) * 100,
mediana = median(`Blast Furnace Slag`),
minimo = min(`Blast Furnace Slag`),
maximo = max(`Blast Furnace Slag`),
Q1 = quantile(`Blast Furnace Slag`, 0.25),
Q3 = quantile(`Blast Furnace Slag`, 0.75),
IQR = IQR(`Blast Furnace Slag`)
)
ggplot(Concrete, aes(y = `Fly Ash`)) +
geom_boxplot(fill = "lightskyblue", alpha = 0.7, outlier.color = "red", outlier.size = 2) +
labs(
title = "Distribución del Contenido de Ceniza Volante",
y = "Ceniza Volante (kg/m³)",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(face = "bold", size = 12)
)
Concrete %>%
summarise(
n = length(`Fly Ash`),
media = mean(`Fly Ash`),
ds = sd(`Fly Ash`),
CV = (sd(`Fly Ash`) / mean(`Fly Ash`)) * 100,
mediana = median(`Fly Ash`),
minimo = min(`Fly Ash`),
maximo = max(`Fly Ash`),
Q1 = quantile(`Fly Ash`, 0.25),
Q3 = quantile(`Fly Ash`, 0.75),
IQR = IQR(`Fly Ash`)
)
ggplot(Concrete, aes(y = Water)) +
geom_boxplot(fill = "skyblue", alpha = 0.7, outlier.color = "red", outlier.size = 2) +
labs(
title = "Distribución del Contenido de Agua",
y = "Agua (kg/m³)",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(face = "bold", size = 12)
)
Concrete %>%
summarise(
n = length(Water),
media = mean(Water),
ds = sd(Water),
CV = (sd(Water) / mean(Water)) * 100,
mediana = median(Water),
minimo = min(Water),
maximo = max(Water),
Q1 = quantile(Water, 0.25),
Q3 = quantile(Water, 0.75),
IQR = IQR(Water)
)
ggplot(Concrete, aes(y = Superplasticizer)) +
geom_boxplot(fill = "plum", alpha = 0.7, outlier.color = "red", outlier.size = 2) +
labs(
title = "Distribución del Contenido de Superplastificante",
y = "Superplastificante (kg/m³)",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(face = "bold", size = 12)
)
Concrete %>%
summarise(
n = length(Superplasticizer),
media = mean(Superplasticizer),
ds = sd(Superplasticizer),
CV = (sd(Superplasticizer) / mean(Superplasticizer)) * 100,
mediana = median(Superplasticizer),
minimo = min(Superplasticizer),
maximo = max(Superplasticizer),
Q1 = quantile(Superplasticizer, 0.25),
Q3 = quantile(Superplasticizer, 0.75),
IQR = IQR(Superplasticizer)
)
ggplot(Concrete, aes(y = `Coarse Aggregate`)) +
geom_boxplot(fill = "tan", alpha = 0.7, outlier.color = "red", outlier.size = 2) +
labs(
title = "Distribución del Contenido de Agregado Grueso",
y = "Agregado Grueso (kg/m³)",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(face = "bold", size = 12)
)
Concrete %>%
summarise(
n = length(`Coarse Aggregate`),
media = mean(`Coarse Aggregate`),
ds = sd(`Coarse Aggregate`),
CV = (sd(`Coarse Aggregate`) / mean(`Coarse Aggregate`)) * 100,
mediana = median(`Coarse Aggregate`),
minimo = min(`Coarse Aggregate`),
maximo = max(`Coarse Aggregate`),
Q1 = quantile(`Coarse Aggregate`, 0.25),
Q3 = quantile(`Coarse Aggregate`, 0.75),
IQR = IQR(`Coarse Aggregate`)
)
ggplot(Concrete, aes(y = `Fine Aggregate`)) +
geom_boxplot(fill = "sandybrown", alpha = 0.7, outlier.color = "red", outlier.size = 2) +
labs(
title = "Distribución del Contenido de Agregado Fino",
y = "Agregado Fino (kg/m³)",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(face = "bold", size = 12)
)
Concrete %>%
summarise(
n = length(`Fine Aggregate`),
media = mean(`Fine Aggregate`),
ds = sd(`Fine Aggregate`),
CV = (sd(`Fine Aggregate`) / mean(`Fine Aggregate`)) * 100,
mediana = median(`Fine Aggregate`),
minimo = min(`Fine Aggregate`),
maximo = max(`Fine Aggregate`),
Q1 = quantile(`Fine Aggregate`, 0.25),
Q3 = quantile(`Fine Aggregate`, 0.75),
IQR = IQR(`Fine Aggregate`)
)
ggplot(Concrete, aes(y = Age)) +
geom_boxplot(fill = "tan", alpha = 0.7, outlier.color = "red", outlier.size = 2) +
labs(
title = "Distribución de la Edad",
y = "Edad (días)",
caption = "n = 1,030 muestras"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text.y = element_text(size = 11),
axis.title.y = element_text(face = "bold", size = 12)
)
Concrete %>%
summarise(
n = length(Age),
media = mean(Age),
ds = sd(Age),
CV = (sd(Age) / mean(Age)) * 100,
mediana = median(Age),
minimo = min(Age),
maximo = max(Age),
Q1 = quantile(Age, 0.25),
Q3 = quantile(Age, 0.75),
IQR = IQR(Age)
)
library(readxl)
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(nortest)
df <- read_excel("C:/Users/samit/Downloads/Concrete_Data.xls")
colnames(df)
names(df)[names(df) == "Concrete compressive strength(MPa, megapascals)"] <- "Resistencia_c"
names(df)[names(df) == "Cement (component 1)(kg in a m^3 mixture)"] <- "Cemento"
names(df)[names(df) == "Blast Furnace Slag (component 2)(kg in a m^3 mixture)"] <- "Residuos"
names(df)[names(df) == "Fly Ash (component 3)(kg in a m^3 mixture)"] <- "Cenizas"
names(df)[names(df) == "Water  (component 4)(kg in a m^3 mixture)"] <- "Agua"
names(df)[names(df) == "Superplasticizer (component 5)(kg in a m^3 mixture)"] <- "Superplastificante"
names(df)[names(df) == "Coarse Aggregate  (component 6)(kg in a m^3 mixture)"] <- "Grueso"
names(df)[names(df) == "Fine Aggregate (component 7)(kg in a m^3 mixture)"] <- "Fino"
names(df)[names(df) == "Age (day)"] <- "Dias"
colnames(df)
ks.test(df$Resistencia_c, "pnorm", mean = mean(df$Resistencia_c), sd = sd(df$Resistencia_c))
shapiro.test(df$Resistencia_c, "pnorm", mean = mean(df$Resistencia_c), sd = sd(df$Resistencia_c))
shapiro.test(df$Resistencia_c)
lillie.test(df$Resistencia_c)
df %>%
ggplot(aes(x = Resistencia_c, y = Cemento)) +
geom_point(color = "blue", size = 3) +
geom_smooth(formula = 'y~x', method = "lm", se = TRUE, color = "red") +
labs(
title = "Relación entre el cemento y la resistencia del concreto",
x = "Resistencia_c",
y = "Cemento"
) +
theme_bw()
lillie.test(df$Cemento)
# 1️⃣ Verifica que las variables sean numéricas
is.numeric(df$Cemento)
is.numeric(df$Resistencia_c)
# 2️⃣ Revisa valores faltantes
sum(is.na(df$Cemento))
sum(is.na(df$Resistencia_c))
# 3️⃣ Visualiza la relación
ggscatter(df, x = "Cemento", y = "Resistencia_c",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Cemento", ylab = "Resistencia del concreto",
title = "Dispersión y correlación (Spearman)")
# 4️⃣ Verifica la forma de la relación (monótona)
plot(df$Cemento, df$Resistencia_c, pch = 19, col = "blue",
main = "Verificación de relación monótona")
# 5️⃣ Ejecuta la prueba de correlación de Spearman
cor.test(df$Cemento, df$Resistencia_c, method = "spearman", exact = FALSE)
df %>%
ggplot(aes(x = Resistencia_c, y = Residuos)) +
geom_point(color = "blue", size = 3) +
geom_smooth(formula = 'y~x', method = "lm", se = TRUE, color = "red") +
labs(
title = "Relación entre RESISTENCIA y los residuos",
x = "Resistencia_c",
y = "Residuos"
) +
theme_bw()
lillie.test(df$Residuos)
# Verifica que las variables sean numéricas
is.numeric(df$Residuos)
is.numeric(df$Resistencia_c)
# Revisa valores faltantes
sum(is.na(df$Residuos))
sum(is.na(df$Resistencia_c))
# Visualiza la relación
ggscatter(df, x = "Residuos", y = "Resistencia_c",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Residuos", ylab = "Resistencia del concreto",
title = "Dispersión y correlación (Spearman)")
# Verifica la forma de la relación (monótona)
plot(df$Cemento, df$Resistencia_c, pch = 19, col = "blue",
main = "Verificación de relación monótona")
# Ejecuta la prueba de correlación de Spearman
cor.test(df$Cemento, df$Resistencia_c, method = "spearman", exact = FALSE)
df %>%
ggplot(aes(x = Resistencia_c, y = Cenizas)) +
geom_point(color = "blue", size = 3) +
geom_smooth(formula = 'y~x', method = "lm", se = TRUE, color = "red") +
labs(
title = "Relación entre RESISTENCIA Y las cenizas",
x = "Resistencia_c",
y = "Cenizas"
) +
theme_bw()
lillie.test(df$Cenizas)
# No hay normalidad, hacemos spearman, verificando supuestos
# Verifica que las variables sean numéricas
is.numeric(df$Cenizas)
is.numeric(df$Resistencia_c)
# Revisa valores faltantes
sum(is.na(df$Cenizas))
sum(is.na(df$Resistencia_c))
# Visualiza la relación
ggscatter(df, x = "Cenizas", y = "Resistencia_c",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Cenizas", ylab = "Resistencia del concreto",
title = "Dispersión y correlación (Spearman)")
# Verifica la forma de la relación (monótona)
plot(df$Cenizas, df$Resistencia_c, pch = 19, col = "blue",
main = "Verificación de relación monótona")
# Ejecuta la prueba de correlación de Spearman
cor.test(df$Cenizas, df$Resistencia_c, method = "spearman", exact = FALSE)
df %>%
ggplot(aes(x = Resistencia_c, y = Agua)) +
geom_point(color = "blue", size = 3) +
geom_smooth(formula = 'y~x', method = "lm", se = TRUE, color = "red") +
labs(
title = "Relación entre RESISTENCIA y AGUA",
x = "Resistencia_c",
y = "Agua"
) +
theme_bw()
lillie.test(df$Agua)
# No hay normalidad, hacemos spearman, verificando supuestos
# Verifica que las variables sean numéricas
is.numeric(df$Agua)
is.numeric(df$Resistencia_c)
# Revisa valores faltantes
sum(is.na(df$Agua))
sum(is.na(df$Resistencia_c))
# Visualiza la relación
ggscatter(df, x = "Agua", y = "Resistencia_c",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Agua", ylab = "Resistencia del concreto",
title = "Dispersión y correlación (Spearman)")
# Verifica la forma de la relación (monótona)
plot(df$Agua, df$Resistencia_c, pch = 19, col = "blue",
main = "Verificación de relación monótona")
# Ejecuta la prueba de correlación de Spearman
cor.test(df$Agua, df$Resistencia_c, method = "spearman", exact = FALSE)
df %>%
ggplot(aes(x = Resistencia_c, y = Superplastificante)) +
geom_point(color = "blue", size = 3) +
geom_smooth(formula = 'y~x', method = "lm", se = TRUE, color = "red") +
labs(
title = "Relación entre RESISTENCIA y Superplastificante",
x = "Resistencia_c",
y = "Superplastificante"
) +
theme_bw()
lillie.test(df$Superplastificante)
# No hay normalidad, hacemos spearman, verificando supuestos
# Verifica que las variables sean numéricas
is.numeric(df$Superplastificante)
is.numeric(df$Resistencia_c)
# Revisa valores faltantes
sum(is.na(df$Superplastificante))
sum(is.na(df$Resistencia_c))
# Visualiza la relación
ggscatter(df, x = "Superplastificante", y = "Resistencia_c",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Superplastificante", ylab = "Resistencia del concreto",
title = "Dispersión y correlación (Spearman)")
# Verifica la forma de la relación (monótona)
plot(df$Superplastificante, df$Resistencia_c, pch = 19, col = "blue",
main = "Verificación de relación monótona")
# Ejecuta la prueba de correlación de Spearman
cor.test(df$Superplastificante, df$Resistencia_c, method = "spearman", exact = FALSE)
df %>%
ggplot(aes(x = Resistencia_c, y = Grueso)) +
geom_point(color = "blue", size = 3) +
geom_smooth(formula = 'y~x', method = "lm", se = TRUE, color = "red") +
labs(
title = "Relación entre RESISTENCIA y Grueso",
x = "Resistencia_c",
y = "Grueso"
) +
theme_bw()
lillie.test(df$Grueso)
# Verifica que las variables sean numéricas
is.numeric(df$Grueso)
is.numeric(df$Resistencia_c)
# Revisa valores faltantes
sum(is.na(df$Grueso))
sum(is.na(df$Resistencia_c))
# Visualiza la relación
ggscatter(df, x = "Grueso", y = "Resistencia_c",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Grueso", ylab = "Resistencia del concreto",
title = "Dispersión y correlación (Spearman)")
# Verifica la forma de la relación (monótona)
plot(df$Grueso, df$Resistencia_c, pch = 19, col = "blue",
main = "Verificación de relación monótona")
# Ejecuta la prueba de correlación de Spearman
cor.test(df$Grueso, df$Resistencia_c, method = "spearman", exact = FALSE)
df %>%
ggplot(aes(x = Resistencia_c, y = Fino)) +
geom_point(color = "blue", size = 3) +
geom_smooth(formula = 'y~x', method = "lm", se = TRUE, color = "red") +
labs(
title = "Relación entre RESISTENCIA y Fino",
x = "Resistencia_c",
y = "Fino"
) +
theme_bw()
lillie.test(df$Fino)
# Verifica que las variables sean numéricas
is.numeric(df$Fino)
is.numeric(df$Resistencia_c)
# Revisa valores faltantes
sum(is.na(df$Fino))
sum(is.na(df$Resistencia_c))
# Visualiza la relación
ggscatter(df, x = "Fino", y = "Resistencia_c",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Fino", ylab = "Resistencia del concreto",
title = "Dispersión y correlación (Spearman)")
# Verifica la forma de la relación (monótona)
plot(df$Fino, df$Resistencia_c, pch = 19, col = "blue",
main = "Verificación de relación monótona")
# Ejecuta la prueba de correlación de Spearman
cor.test(df$Fino, df$Resistencia_c, method = "spearman", exact = FALSE)
df %>%
ggplot(aes(x=Resistencia_c, y =Dias )) +
geom_point(color = "blue",size = 3) +
geom_smooth(formula = 'y~x', method = "lm",se = TRUE,color="red") +
labs(
title = "Relación entre RESISTENCIA y Dias",
x = "Resistencia_c",
y = "Dias"
) +
theme_bw()
lillie.test(df$Dias)
# 1️⃣ Verifica que las variables sean numéricas
is.numeric(df$Dias)
is.numeric(df$Resistencia_c)
# 2️⃣ Revisa valores faltantes
sum(is.na(df$Dias))
sum(is.na(df$Resistencia_c))
# 3️⃣ Visualiza la relación
ggscatter(df, x = "Dias", y = "Resistencia_c",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Fino", ylab = "Resistencia del concreto",
title = "Dispersión y correlación (Spearman)")
# 4️⃣ Verifica la forma de la relación (monótona)
# Si la relación es creciente o decreciente, aunque no lineal, se puede usar Spearman
plot(df$Dias, df$Resistencia_c, pch = 19, col = "blue",
main = "Verificación de relación monótona")
# 5️⃣ Ejecuta la prueba de correlación de Spearman
resultado <- cor.test(df$Dias, df$Resistencia_c, method = "spearman", exact=FALSE)
resultado
n <- nrow(df)
gl = n-2
p = resultado$estimate[[1]]
t_critico = p*sqrt(gl/1-p^2)
t_critico = abs(t_critico)
alpha = 0.05
t_tab = qt(1-alpha/2,df=gl)
abs(t_critico)
t_tab
n <- nrow(df)
gl = n-2
p = resultado$estimate[[1]]
t_critico = p*sqrt(gl/1-p^2)
t_critico = abs(t_critico)
alpha = 0.05
t_tab = qt(1-alpha/2,df=gl)
abs(t_critico)
t_tab
library(knitr)
library(kableExtra)
library(readxl)
library(tibble)
library(readr)
library(Amelia)
library(ggplot2)
library(tidyverse)
library(reshape2)
library(gridExtra)
library(GGally)
library(MAVE)
library(ggpubr)
library(nortest)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.width = 10, fig.height = 6)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
book_filename: "mi_libro"
book_filename: "METEST"
